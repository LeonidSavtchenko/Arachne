#pragma once

#include "Containers/DistVector.h"
#include "MatFileIO/MatFileIOUtils.h"

#include "Autogenerated/AllModCurrents.h"

template <typename T>
class ModCurrent
{
public:

    // Constructors

	ModCurrent();

	ModCurrent(char suffix, T dt, bool continuationMode, bool enable, int num, const DistVector<T> &v, int m_steps_prev, int m_steps);

	ModCurrent<T>& operator= (const ModCurrent<T>& ) = default;

public:

	//!!t_AllModCurrents_e<T>* m_AllModCurrents_e;
	//!!t_AllModCurrents_i<T>* m_AllModCurrents_i;

    // Public methods

    void GatherWriteIntermediateData();
    void WriteOutputData(int num_steps);

    void DoOneStepPart1(const DistVector<T> &v);
    void DoOneStepPart2(int iter, const DistVector<T> &v, const DistVector<T> &v_tmp);

private:
    void ReadInputDataAllocateTemporaryArrays(bool continuationMode, bool enable, int num, const DistVector<T> &v);
    void ReadTransitMxArrays();
    void WriteTransitMxArrays();

public:
    // The current itself
    DistVector<T> I;

private:
    // "e" or "i"
    std::string suffix;

 
    // Floating-point scalars
    T dt, dt05;

    

    // Number of steps
    int m_steps_prev, m_steps;

  
};

