function GenerateIncFiles(modFileNames_e, modFileNames_i, outDirPath)

    lenModFileNames_e = length(modFileNames_e);
    lenModFileNames_i = length(modFileNames_i);

    %******************* Generate ModCustomMPItypes.inc *******************%
    outFileName = 'ModCustomMPItypes.inc';
    fprintf('    Generating %s ...\n', outFileName);

    outFilePath = fullfile(outDirPath, outFileName);
    fid = fopen(outFilePath, 'w+');
    if fid == -1
        error('Cannot open file for writing');
    end

    if lenModFileNames_e + lenModFileNames_i == 0
        outFileLines = cell(1, 1);
        outFileLines{1, 1} = '';
    else
        outFileLines = {};
        outFileLines{end + 1, 1} = 'namespace DistEnv';
        outFileLines{2, 1} = '{';      
        for i = 1 : lenModFileNames_e
            outFileLines{end + 1, 1} = ['    MPI_Datatype MPI_', modFileNames_e{i}, '_float;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['    MPI_Datatype MPI_', modFileNames_e{i}, '_double;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '    '; %#ok<AGROW>
        end
        outFileLines{end + 1, 1} = '    ';
        for i = 1 : lenModFileNames_i
            outFileLines{end + 1, 1} = ['    MPI_Datatype MPI_', modFileNames_i{i}, '_float;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['    MPI_Datatype MPI_', modFileNames_i{i}, '_double;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '    '; %#ok<AGROW>
        end
        outFileLines{end, 1} = '}';
    end

    for i = 1 : length(outFileLines)
        fprintf(fid, '%s\r\n', outFileLines{i});
    end
    fclose(fid);
    %**********************************************************************%

    %***************** Generate InstantiationModTypes.inc *****************%
    outFileName = 'InstantiationModTypes.inc';
    fprintf('    Generating %s ...\n', outFileName);

    outFilePath = fullfile(outDirPath, outFileName);
    fid = fopen(outFilePath, 'w+');
    if fid == -1
        error('Cannot open file for writing');
    end

    if lenModFileNames_e + lenModFileNames_i == 0
        outFileLines = cell(1, 1);
        outFileLines{1, 1} = '';
    else
        outFileLines = {};
        outFileLines{end + 1, 1} = '#pragma once';
        outFileLines{end + 1, 1} = '';
        for i = 1 : lenModFileNames_e
            outFileLines{end + 1, 1} = ['#include "ModCurrents/Autogenerated/', modFileNames_e{i}, '.h"']; %#ok<AGROW>
        end
        outFileLines{end + 1, 1} = '';
        for i = 1 : lenModFileNames_i
            outFileLines{end + 1, 1} = ['#include "ModCurrents/Autogenerated/', modFileNames_i{i}, '.h"']; %#ok<AGROW>
        end
        outFileLines{end + 1, 1} = '';
        outFileLines{end + 1, 1} = '// Instantiating MOD classes for e-type neurons';
        for i = 1 : lenModFileNames_e
            outFileLines{end + 1, 1} = 'template'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['class DistVector<mod::', modFileNames_e{i}, '<float>>;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
            outFileLines{end + 1, 1} = 'template'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['class DistVector<mod::', modFileNames_e{i}, '<double>>;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
        end
        outFileLines{end + 1, 1} = '';
        outFileLines{end + 1, 1} = '// Instantiating MOD classes for i-type neurons';
        for i = 1 : lenModFileNames_i
            outFileLines{end + 1, 1} = 'template'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['class DistVector<mod::', modFileNames_i{i}, '<float>>;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
            outFileLines{end + 1, 1} = 'template'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['class DistVector<mod::', modFileNames_i{i}, '<double>>;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
        end
    end
    
    for i = 1 : length(outFileLines)
        fprintf(fid, '%s\r\n', outFileLines{i});
    end
    fclose(fid);
    %**********************************************************************%
    
    %****************** Generate GetModMpiDataTypes.inc *******************%
    outFileName = 'GetModMpiDataTypes.inc';
    fprintf('    Generating %s ...\n', outFileName);

    outFilePath = fullfile(outDirPath, outFileName);
    fid = fopen(outFilePath, 'w+');
    if fid == -1
        error('Cannot open file for writing');
    end

    if lenModFileNames_e + lenModFileNames_i == 0
        outFileLines = cell(1, 1);
        outFileLines{1, 1} = '';
    else
        outFileLines = {};
        outFileLines{end + 1, 1} = '#pragma once';
        outFileLines{end + 1, 1} = '';
        for i = 1 : lenModFileNames_e
            outFileLines{end + 1, 1} = ['#include "ModCurrents/Autogenerated/', modFileNames_e{i}, '.h"']; %#ok<AGROW>
        end
        outFileLines{end + 1, 1} = '';
        for i = 1 : lenModFileNames_i
            outFileLines{end + 1, 1} = ['#include "ModCurrents/Autogenerated/', modFileNames_i{i}, '.h"']; %#ok<AGROW>
        end
        outFileLines{end + 1, 1} = '';
        for i = 1 : lenModFileNames_e
            outFileLines{end + 1, 1} = 'template <>'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['inline MPI_Datatype GetMpiDataType<mod::', modFileNames_e{i}, '<float>>()']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '{'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['    return DistEnv::MPI_', modFileNames_e{i}, '_float;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '}'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
            outFileLines{end + 1, 1} = 'template <>'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['inline MPI_Datatype GetMpiDataType<mod::', modFileNames_e{i}, '<double>>()']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '{'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['    return DistEnv::MPI_', modFileNames_e{i}, '_double;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '}'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
        end
        
        for i = 1 : lenModFileNames_i
            outFileLines{end + 1, 1} = 'template <>'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['inline MPI_Datatype GetMpiDataType<mod::', modFileNames_i{i}, '<float>>()']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '{'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['    return DistEnv::MPI_', modFileNames_i{i}, '_float;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '}'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
            outFileLines{end + 1, 1} = 'template <>'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['inline MPI_Datatype GetMpiDataType<mod::', modFileNames_i{i}, '<double>>()']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '{'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['    return DistEnv::MPI_', modFileNames_i{i}, '_double;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '}'; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
        end
    end
    
    for i = 1 : length(outFileLines)
        fprintf(fid, '%s\r\n', outFileLines{i});
    end
    fclose(fid);
    %**********************************************************************%
    
    %**************** Generate ExternModCustomMPItypes.inc ****************%
    outFileName = 'ExternModCustomMPItypes.inc';
    fprintf('    Generating %s ...\n', outFileName);

    outFilePath = fullfile(outDirPath, outFileName);
    fid = fopen(outFilePath, 'w+');
    if fid == -1
        error('Cannot open file for writing');
    end

    if lenModFileNames_e + lenModFileNames_i == 0
        outFileLines = cell(1, 1);
        outFileLines{1, 1} = '';
    else
        outFileLines = {};
        outFileLines{end + 1, 1} = 'namespace DistEnv';
        outFileLines{end + 1, 1} = '{';
        for i = 1 : lenModFileNames_e
            outFileLines{end + 1, 1} = ['    extern MPI_Datatype MPI_', modFileNames_e{i}, '_float;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['    extern MPI_Datatype MPI_', modFileNames_e{i}, '_double;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '    '; %#ok<AGROW>
        end
        outFileLines{end + 1, 1} = '    ';
        for i = 1 : lenModFileNames_i
            outFileLines{end + 1, 1} = ['    extern MPI_Datatype MPI_', modFileNames_i{i}, '_float;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['    extern MPI_Datatype MPI_', modFileNames_i{i}, '_double;']; %#ok<AGROW>
            outFileLines{end + 1, 1} = '    '; %#ok<AGROW>
        end
        outFileLines{end + 1} = '}';
    end
    
    for i = 1 : length(outFileLines)
        fprintf(fid, '%s\r\n', outFileLines{i});
    end
    fclose(fid);
    %**********************************************************************%
    
    %**************** Generate CreateModCustomMPItypes.inc ****************%
    outFileName = 'CreateModCustomMPItypes.inc';
    fprintf('    Generating %s ...\n', outFileName);

    outFilePath = fullfile(outDirPath, outFileName);
    fid = fopen(outFilePath, 'w+');
    if fid == -1
        error('Cannot open file for writing');
    end

    if lenModFileNames_e + lenModFileNames_i == 0
        outFileLines = cell(1, 1);
        outFileLines{1, 1} = '';
    else
        outFileLines = {};
        outFileLines{end + 1, 1} = '#pragma once';
        outFileLines{end + 1, 1} = '';
        for i = 1 : lenModFileNames_e
            outFileLines{end + 1, 1} = ['#include "ModCurrents/Autogenerated/', modFileNames_e{i}, '.h"']; %#ok<AGROW>
        end
        outFileLines{end + 1, 1} = '';
        for i = 1 : lenModFileNames_i
            outFileLines{end + 1, 1} = ['#include "ModCurrents/Autogenerated/', modFileNames_i{i}, '.h"']; %#ok<AGROW>
        end
        
        outFileLines{end + 1, 1} = '';
        
        for i = 1 : lenModFileNames_e
            outFileLines{end + 1, 1} = ['MPI_Type_contiguous(sizeof(mod::', modFileNames_e{i}, '<float>), MPI_BYTE, &MPI_', modFileNames_e{i}, '_float);']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['MPI_Type_commit(&MPI_', modFileNames_e{i}, '_float);']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['MPI_Type_contiguous(sizeof(mod::', modFileNames_e{i}, '<double>), MPI_BYTE, &MPI_', modFileNames_e{i}, '_double);']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['MPI_Type_commit(&MPI_', modFileNames_e{i}, '_double);']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
        end
        
        outFileLines{end + 1, 1} = '';
        
        for i = 1 : lenModFileNames_i
            outFileLines{end + 1, 1} = ['MPI_Type_contiguous(sizeof(mod::', modFileNames_i{i}, '<float>), MPI_BYTE, &MPI_', modFileNames_i{i}, '_float);']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['MPI_Type_commit(&MPI_', modFileNames_i{i}, '_float);']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['MPI_Type_contiguous(sizeof(mod::', modFileNames_i{i}, '<double>), MPI_BYTE, &MPI_', modFileNames_i{i}, '_double);']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ['MPI_Type_commit(&MPI_', modFileNames_i{i}, '_double);']; %#ok<AGROW>
            outFileLines{end + 1, 1} = ''; %#ok<AGROW>
        end
    end
    
    for i = 1 : length(outFileLines)
        fprintf(fid, '%s\r\n', outFileLines{i});
    end
    fclose(fid);
    %**********************************************************************%

end